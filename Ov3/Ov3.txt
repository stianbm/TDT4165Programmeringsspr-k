			***Exercise 3***
			
			
Task 1: Free and Bound Identifiers

	a)
		If an identifier is free then it will not have anything asociated with it. If it's bound
		then it will be asociated with a function or a variable for example.
		
	b)
		X is bound as a variable.
		The rest are unbound.
		
	c)
		X is bound as a variable.
		Y is bound as a variable.
		The rest are unbound.
	
	d)
		W is bound as a procedure.
		Y is bound as a variable.
		A is bound as a variable.
		The rest are unbound.
		
	e)
		X is bound as a variable.
		r is bound as a variable (record).
		Y is bound as a variable.
		The res are unbound.
		
		
Task 2: Free and Bound (Logic) Variables (treat lower case letters as values, except if
	followed by "(" which means record)
	
	a)
		Will succeed.
		Partyally bound.
		
	b)
		Will succeed.
		Partyally bound.
		
	c)
		Will succeed.
		Fully bound.
		
	d)
		Will not succeed.
		Record with both b and c as second value.
		
	e)
		Will succeed.
		Fully bound.
		
	f)
		Will not succeed.
		A bound to poth b and c.
		
		
Task 3: External References

	a)
		An external reference is the use of an unbound identifier which is bound outside of
		the function/procedure.
		
	b)
		V, W and U are external references.
		
	c)
		V is an external reference.
		
	d)
		No external references, but a recursive call of the procedure Y.
		
	e)
		V and U are external references.
		
	f)
		V is an external reference.
		
		
Task 4: Kernel Language Translation

	a)
		local A B C D in
			A = 1
			B = 3
			C = "9
			D = 39
			{System.ShowInfo A+B+C+D}
		end
		
	b)
		local A = 10 in
			if A == 1 then
				{System.showInfo "A is equal to 1"}
			else
				{System.showInfo "A is not equal to 1"}
				if A < 0 then
					{System.showInfo "A is zero"}
				else
					if A == 10 then
						{System.showInfo "A is 10"}
					else
						{System.showInfo "I donâ€™t know what A is"}
					end
				end
			end
		end
		
	c)
		proc {Append List1 List2}
			case List1 of nil then
				List2
			[] H|T then
				H|{Append T List2}
			end
		end
		
	d)
		proc {Max X Y}
			if X==0 then
				Y
			else
				if Y==0 then
					X
				else
					1+{Max X-1 Y-1}
				end
			end
		end
		
	
Task 5: Declaring Multiple Variables

	(local <X1> <X2> ... <Xn> in <S> end)
	-Create new variable x1 x2 ... xn in store
	-E' = E + {<X1> -> x1}
	-E'' = E' + {<X2> -> x2}
	-...
	-E^n = E^(n-1) + {<Xn> -> xn}
	-Push ((S),E^n) onto stack
	
	
Task 6: Execution using the abstract machine

	a)
		( [( local B in if B then skip else skip end end, E )], S )
		( [if B then skip else skip end end, B->V1 )], V1 ) Create variable and map
		stop, V1 is unbound
		
	b)
		([(local B in B = false if B then skip else skip end end, E)], S)
		([(B = false if B then skip else skip end, B->V1)], V1) Create variable and map
		([(if B then skip else skip end, B->V1)], V1=false) Map variable to value
		([(skip, B->V1)], V1=false)
		
	c)
		([(local X Z A B P in proc {P X Y} Y = X + Z end Z = 7 X = 4 {P X A} {P A B} end, E)], S)
		([(proc {P X Y} Y = X + Z end Z = 7 X = 4 {P X A} {P A B}, {X->V1 Z->V2 A->V3 B->V4 P->V5})], V1 V2 V3 V4 V5) Create variable and map
		([(proc {P X Y} Y = X + Z end {P X A} {P A B}, {X->V1 Z->V2 A->V3 B->V4 P->V5})], V1=4 V2=7 V3 V4 V5) Unify
		([({P X A} {P A B}, {X->V1 Z->V2 A->V3 B->V4 P->V5 P=proc{P X Y} Y=X+Z end})], V1=4 V2=7 V3 V4 V5) map P to proc
		([({P A B}, {X->V1 Z->V2 A->V3 B->V4 P->V5 P=proc{P X Y} Y=X+Z end})], V1=4 V2=7 V3=11 V4 V5) Unify
		([([], {X->V1 Z->V2 A->V3 B->V4 P->V5 P=proc{P X Y} Y=X+Z end})], V1=4 V2=7 V3=3 V4=18 V5) Unify
	
		
Task 7: Unification
	
	a)
		ERROR A unified with 2 and 3
		
	b)
		SUCCESS A B and C unified with each other and a
		
	c)
		SUCCESS D unified with the list 1|2|3|4|B|nil, A unified with the list 3|4|B|nil
		
	d)
		SUCCESS D unified with list 1|2|nil|3|4|nil, A=2, B=nil
		Will cause weird list as nil is supposed to indicate end
		
	e)
		SUCCESS infinite list where B = 3|4|B
		
		
Task 8: Lazy Programming
	
	a)
		 A = 1|2|B
		 B = 3|4|B

	 b)
		local A in
		fun lazy{
			A = 5|{lazy}
		}
		
		The above doesn't exhaust the computers memory because it's recursively defined and not actually
		"derived" before it's used.